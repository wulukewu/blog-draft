[{"title":"Docker - Ubuntu SSH Setup","url":"/blog/2024/11/docker-ubuntu-ssh-setup/","content":"Docker - Ubuntu SSH Setup\nHost: Use the same port -&gt; just change to the SSH\nport that does not conflict with NAS.\nEnvironment Settings\nfor Ubuntu Container\nDockerfile\nFROM ubuntu:latestRUN apt-get update &amp;&amp; apt-get install -y openssh-serverRUN mkdir /var/run/sshdRUN echo 'root:your_password' | chpasswdRUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_configRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd# Other installationsRUN apt-get upgrade -yRUN apt-get install -y sudo nano vim curl gitEXPOSE 22CMD [\"/usr/sbin/sshd\", \"-D\"]\nDocker Build and Push to\nDocker Hub\ndocker build -t ubuntu_ssh .docker tag ubuntu_ssh wulukewu/ubuntu_ssh:latestdocker push wulukewu/ubuntu_ssh:latest\nInstall OpenSSH-Server\napt-get update apt-get install -y openssh-servermkdir /var/run/sshdecho 'root:your_password' | chpasswdsed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_configsed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd/usr/sbin/sshd -D\n\nPull and Run the ubuntu_ssh\nImage\nPull ubuntu_ssh from Docker\nHub\nsudo docker pull wulukewu/ubuntu_ssh:latest\nRun ubuntu_ssh in Host\nsudo docker run -d --net=host --name ubuntu_ssh wulukewu/ubuntu_ssh:latest\nAccess the Ubuntu Container\nsudo docker exec -i -t ubuntu_ssh /bin/bash\n\nHostname Configuration\nChange Hostname\nsudo nano /etc/hostnamesudo nano /etc/hostssudo reboot\nDisplay the Current Hostname\nhostname\n\nSSH Configuration\nChange SSH Port\nsudo nano /etc/ssh/sshd_configservice ssh restart\n\nUser Management\nAdd a New Sudo User\nadduser user_name\nAdd the User to the Sudo\nGroup\nusermod -aG sudo user_nameusermod -aG root user_name\nChange User Password\nsudo passwd user_name\nTest Sudo Access\nsu - user_name\n\nReferences\n\nHow\nto SSH into a Docker Container | Step-by-Step Tutorial\nSave\nDocker Image as a File\nUbuntu\nLinux Change Hostname\nDay 21:\nIntroduction to Docker Networking (Part 2)\nDocker\nBasic Commands Cheat Sheet\nHow\nto Create a New Sudo-Enabled User on Ubuntu\nChange\nPassword for Root and User Accounts\nAsk\nChatGPT\n\n","tags":["docker","ubuntu","ssh","devops","containerization","linux","tutorial"]},{"title":"設定GitHub SSH金鑰","url":"/blog/2024/11/github-ssh-key/","content":"Setup\n\n根據email創建一個新的SSH金鑰\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n開啟ssh-agent，將私鑰加入到ssh-agent\neval \"$(ssh-agent -s)\"ssh-add -K ~/.ssh/id_rsa\n上傳公鑰，並到GitHub上上傳SSH key\ncat ~/.ssh/id_rsa.pub GitHub Keys Settings \nssh連接GitHub SSH ssh -T git@github.com\n\nResources\n\n設定 Github\nSSH 金鑰 feat. Github SSH、HTTPS 的差異\nHow to clone, push, and pull\nwith git (beginners GitHub tutorial)\n\n","tags":["ssh","tutorial","github","git","setup"]},{"title":"量子計算基礎 - 從單量子位到多量子位系統","url":"/blog/2025/04/quantum-system/","content":"大一下去修了一門量子計算的課，前面的概念跟線性代數有滿多相似的地方，後半部分才真正開始講量子演算法。\n量子計算基礎\n量子電腦與傳統電腦的差別，在於傳統電腦儲存資訊的最小單位是位元（bit），量子電腦則是使用量子位元（qubit）。位元可以存在一種狀態，1\n或是 0。量子位元特別的地方是，它在一個時間，可以同時是 1 也是 0。\n過去超大整數的質因數分解，即使傳統超級電腦的運算能力也無法在短時間破解。不過，量子演算法（Shor’s\nAlgorithm，可解質因數分解）能在合理時間內完成破解，會顛覆現在 RSA\n等加密算法。\n\n單量子位系統\n(Single-Qubit Quantum Systems)\n在量子計算中，量子位元 (Qubit)\n是最基本的資訊單位，類似於傳統計算中的位元\n(Bit)。然而，與傳統位元只能處於 0 或 1 的狀態不同，量子位元可以同時處於\n0 和 1 的疊加態。先來介紹一下量子計算所處於的空間定義：\nHilbert 空間 (Hilbert Space)\n對於單量子位元系統，Hilbert 空間是一個複數 ℂ 中的 inner product\nspace，有向量加法、純量乘法，以及計算向量之間的內積。\n\nIf |ψ⟩,|ϕ⟩ ∈ V, α, β ∈ ℂ, then α|ψ⟩+β|ϕ⟩ ∈ V.\n\n在單量子位元系統當中，我們常用, 當作標準基底，而一個量子位元則可表示為 |ψ⟩=α|0⟩ + β|1⟩。\n至於維度 (Dimension) 為 N\n的向量空間，則會以 {|e1⟩,|e2⟩, …, |eN⟩}\n當作標準基底，也可以寫成{|0⟩,|1⟩, …, |N − 1⟩} 。\n\n\n正規化 (Normalized)：⟨ei|ei⟩=⟨e2|e2⟩ = … = ⟨eN|eN⟩ = 1\n正交 (Orthogoral)：⟨ei|ej⟩=⟨e2|e3⟩ = … = ⟨eN|eN⟩ = 0\n\n因此：\n\nNote：單量子位元系統的 Hilbert 空間是一個 N = 2\n的簡單空間，而複數量子位元系統的 Hilbert\n空間維度會隨著量子位元數量增加而指數成長，例如 n = 5 個量子位元系統的 Hilbert\n空間維度為 N = 25 = 32。\n範例\n我們拿一個例子來說明好了，假設 , ，那麼可以做下列這幾個運算：\n對偶向量 (Dual Vector)\n\n\n\n\n內積 (Inner Product)\n\n\n\n\n因此：\n\n⟨v|v⟩ ∈ ℝ ≥ 0\n(non-negative real)\n\n(a⟨v2|+b⟨v3|)|v1⟩=a⟨v2|v1⟩ + b⟨v3|v1⟩\n\n向量範數 (Norm)\n\n正規化向量 (Normalized\nVector)\n量子態必須是正規化的，以保證測量結果的機率總和為 1。\n\n例如：\n\n計算內積：\n\n\n投影運算子 (Projection\nOperator)\n\n\n\n此時算出的  和  就分別是 |ψ⟩ 在 |e1⟩ 和 |e2⟩\n兩個基底的投影運算子。\n崩塌 (Collapse)\n我們前面說過，|ψ⟩=∑iαi|ei⟩\n是由N維的基底所組成的。其中\n|ei⟩ 在\n|ψ⟩ 出現的機率為 |αi|2，則|α1|2 + |α2|2 + … + |αN|2 = 1。\n在 |ψ⟩=∑iαi|ei⟩\n當中，|ei⟩\n出現的機率取決於 |αi|2，而此時的觀測是不可逆的。當測量完成後，量子態會崩塌到對應的基底態\n|ei⟩，並且無法回復到原本的疊加態。因此測量過程不可逆，且量子態的疊加性在測量後不復存在。\n範例\n\n\n|e1⟩ 在\n|ψ⟩ 出現的機率為 \n|e2⟩ 在\n|ψ⟩ 出現的機率為 \n\n\n量子態 (Quantum State)：\nPi|ψ⟩→|ei⟩\n|ψ⟩=α1|e1⟩ + α2|e2⟩\n經典態 (Classical State)：\n\n\n量子態在測量後會崩塌到某個基底態，而此時的經典態不再具有量子態的疊加性。\nBloch 球 (Bloch Sphere)\nBloch 球用於表示單量子位的狀態：\n\n\nBloch Sphere\n\n\n|0⟩ → (0,0,1)\n|1⟩ → (0,0,−1)\n| + ⟩ → (1,0,0)\n| − ⟩ → (−1,0,0)\n|i⟩ → (0,1,0)\n| − i⟩ → (0,−1,0)\n\nBloch 球上的 I, X, Y, Z\n運算子幾何意義\n\nI (單位運算子)：不改變 Bloch\n球上的狀態（即不旋轉）。\nX 門（Pauli-X）：繞 x 軸旋轉 π 弧度（180°），將 |0⟩ 和 |1⟩\n互換。對應於 Bloch 球上的 x\n軸翻轉。\nY 門（Pauli-Y）：繞 y 軸旋轉 π 弧度（180°），將 |0⟩ 和 |1⟩\n互換，並帶有相位。對應於 Bloch 球上的 y 軸翻轉。\nZ 門（Pauli-Z）：繞 z 軸旋轉 π 弧度（180°），將 | + ⟩ 和 | − ⟩ 互換，|0⟩ 不變，|1⟩ 變號。對應於 Bloch 球上的 z 軸翻轉。\n\n簡單來說，X, Y, Z 分別對應於 Bloch 球上繞 x、y、z 軸的 180° 旋轉。\n\n多量子位系統\n(Multiple-Qubit Systems)\nHilbert 空間與張量積\n(Tensor Product)\n多量子位系統的 Hilbert 空間是單量子位空間的張量積：\nH2 ⊗ H2 ⊗ … ⊗ H2 = HN  (N\n個)\n假設：\n\n第 0 個 H2：{|0⟩0,|1⟩0}\n第 1 個 H2：{|0⟩1,|1⟩1}\n\nTensor Product\nH2 ⊗ H2:\n|ψ1⟩⊗|ψ0⟩ = [α1|0⟩1+β1|1⟩1] ⊗ [α0|0⟩0+β0|1⟩0]\n = α1α0|0⟩1⊗|0⟩0 + α1β0|0⟩1⊗|1⟩0 + β1α0|1⟩1⊗|0⟩0 + β1β0|1⟩1⊗|1⟩0\n = α1α0|00⟩10+α1β0|01⟩10 + β1α0|10⟩10+β1β0|11⟩10\n而此時：\n\n|0⟩1⊗|0⟩0 = |00⟩10\n|0⟩1⊗|1⟩0 = |01⟩10\n|1⟩1⊗|0⟩0 = |10⟩10\n|1⟩1⊗|1⟩0 = |11⟩10\n\n|00⟩,|01⟩, |10⟩,|11⟩ 為 H4 的基底\n範例\n假設：\n\n第 0 個 H2：, , T0 operator\n第 1 個 H2：, , T1 operator\n\n計算張量積：\n\n\n\n\n運算子與單元矩陣\n在多量子位系統中，運算子 T\n和單位運算子 I\n的結合可以用來描述量子態的演化。假設 T0 和 T1\n是作用於不同量子位的運算子，若它們相等，即 T0 = T1 = T，則可以簡化為單一運算子\nT 的作用。\n單位運算子 I\n的作用不會改變量子態，滿足以下關係：\nI|ψ⟩=|ψ⟩\n其中，單位運算子 I\n的矩陣形式為：\n\n當運算子 T\n作用於單一量子位的量子態時，可以表示為：\nT|ψ1⟩,|ψ0⟩\n而當運算子 T 與單位運算子\nI\n結合，作用於多量子位系統的張量積態時，則可以表示為：\n(T⊗I)(|ψ1⟩⊗|ψ0⟩)\n單位運算子：\n\n單元矩陣 (Unitary Matrix)\n假設 U ：\n\n則可發現 U−1 = U†\nNote：共軛轉置 (conjugate) U† = (U*)T\n\n\n\nU 是 Unitary Matrix\n\n量子門與狀態轉換\n(Quantum Gates and State Transformations)\n常見量子門\nH2\n的基本運算子為 I, X, Y, Z\n基本運算子 - X (NOT)\nX|0⟩=|1⟩,  X|1⟩=|0⟩\n\n其中：\nX2 = I = X−1X\nX−1 = X\n基本運算子 - Y\nY|0⟩=+i|1⟩,  Y|1⟩=−i|0⟩\n\n其中：\nY† = Y\n\nY2 = I\nY 是單元矩陣\n基本運算子 - Z\nZ|0⟩=|0⟩,  Z|1⟩=−|1⟩\n\n糾纏態與測量\n在H2中，\nU = αI + βX + γY + δZ\nBell State （貝爾態）\n\n\n\n\nBell State 是兩個 qubit 之間最純粹的糾纏態。\n假設：\n|ψ1⟩=α1|0⟩ + β1|1⟩,  |ψ0⟩ = α0|0⟩+β0|1⟩\n則它們的張量積\n|ψ1⟩⊗|ψ0⟩ = α1α0|00⟩+α1β0|01⟩ + β1α0|10⟩+β1β0|11⟩\n如果 β1α0 = α1β0 = 0，則為\n可分離態；否則為 糾纏態\n(entanglement)。\n糾纏測量\nα1α0|00⟩+β1β0|11⟩ ≠ |ψ1⟩⊗|ψ0⟩\n例如：\n|00⟩+|11⟩ = |0⟩1⊗|0⟩0 + |1⟩1⊗|1⟩0\n\n\nEntangled Measurement\n\n此時去做量子測量：\n\n第 1 個質點測量到 |0⟩，則第 0\n個質點就確定為 |0⟩\n第 1 個質點測量到 |1⟩，則第 0\n個質點就確定為 |1⟩\n\n逆向計算 (Reverse\nComputation)\nCNOT (Control NOT)\nCNOT 門的運作如下：\n\n\nCNOT Gate\n\n\nCNOT 性質：\nCNOT ⋅ CNOT = I\nCNOT−1 ⋅ CNOT = I\nCNOT−1 = CNOT\n舉個例子：\n\n\n\n\n\n\n\n1 ⊗ 0 = 1\n1 ⊗ 1 = 0\n\n\n\n\n\n\n\n\n\n這是所有計算中最重要的一個運算門，並且可以延伸出 COPY、NOT 和 SWAP\n三種操作：\n\n\n\n\n\n\n\n\nCOPY\nNOT\nSWAP\n\n\n\n\n\n\n\n\n\n\nCCNOT (Toffoli Gate)\nCCNOT 門的運作如下：\n\n\nCCNOT Gate\n\n\na = 0, b = 0 ⟹ ab = 0 ⟹ |c⊕ab⟩=|c ⊕ 0⟩ = |c⟩\n\n\nCCNOT 性質：\n\n\nCCNOT Reversibility\n\nCCNOT ⋅ CCNOT = I\nCCNOT−1 ⋅ CCNOT = I\nCCNOT−1 = CCNOT\n邏輯運算門\nAND\nAND 的運作如下：\n\n\nAND Gate\n\nXOR\nXOR 的運作如下：\n\n\nXOR Gate\n\nNAND (NOT AND)\nNAND 的運作如下：\n\n\nNAND Gate\n\nNOT\nNOT 也可以用 CNOT 的形式來表示：\n\n\nNOT Gate\n\nOR\nOR 的運作如下：\n\n\nOR Gate\n\n範例\n以下是量子電路的等價性：\n\n\nQuantum Circuit Equivalence\n\n\n量子傳輸\n量子演算法\nBernstein-Vazirani Algorithm\nSimon’s Algorithm\nShor’s Algorithm\n","tags":["quantum","hilbert-space","algorithms","physics"]},{"title":"Vue Basic Syntax","url":"/blog/2025/01/vue-basic-syntax/","content":"Vue Basic Syntax\nDirectives\n\nEvent Binding: v-on or shorthand\n@click\nAttribute Binding: v-bind or shorthand\n:attribute\n\nExamples: :input, :input.enter,\n:key\n\nTwo-Way Binding: v-model\nConditional Rendering:\n\nv-if\nv-else-if\nv-else\nv-show\n\nList Rendering: v-for\n\nExample: v-for=\"goal in goals\"\n\n\nCommunication Between\nComponents\n\nProps: Pass data from parent to child\nEmits: Send events from child to parent\n\n","tags":["tutorial","vue","syntax","basics","guide"]}]