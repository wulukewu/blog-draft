[{"title":"Docker - Ubuntu SSH Setup","url":"/blog/2024/11/docker-ubuntu-ssh-setup/","content":"Docker - Ubuntu SSH SetupHost: Use the same port -&gt; just change to the SSH port that does not conflict with NAS.\nEnvironment Settings for Ubuntu ContainerDockerfileFROM ubuntu:latestRUN apt-get update &amp;&amp; apt-get install -y openssh-serverRUN mkdir /var/run/sshdRUN echo 'root:your_password' | chpasswdRUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_configRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd# Other installationsRUN apt-get upgrade -yRUN apt-get install -y sudo nano vim curl gitEXPOSE 22CMD [\"/usr/sbin/sshd\", \"-D\"]\nDocker Build and Push to Docker Hubdocker build -t ubuntu_ssh .docker tag ubuntu_ssh wulukewu/ubuntu_ssh:latestdocker push wulukewu/ubuntu_ssh:latest\nInstall OpenSSH-Serverapt-get update apt-get install -y openssh-servermkdir /var/run/sshdecho 'root:your_password' | chpasswdsed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_configsed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd/usr/sbin/sshd -D\n\nPull and Run the ubuntu_ssh ImagePull ubuntu_ssh from Docker Hubsudo docker pull wulukewu/ubuntu_ssh:latest\nRun ubuntu_ssh in Hostsudo docker run -d --net=host --name ubuntu_ssh wulukewu/ubuntu_ssh:latest\nAccess the Ubuntu Containersudo docker exec -i -t ubuntu_ssh /bin/bash\n\nHostname ConfigurationChange Hostnamesudo nano /etc/hostnamesudo nano /etc/hostssudo reboot\nDisplay the Current Hostnamehostname\n\nSSH ConfigurationChange SSH Portsudo nano /etc/ssh/sshd_configservice ssh restart\n\nUser ManagementAdd a New Sudo Useradduser user_name\nAdd the User to the Sudo Groupusermod -aG sudo user_nameusermod -aG root user_name\nChange User Passwordsudo passwd user_name\nTest Sudo Accesssu - user_name\n\nReferences\nHow to SSH into a Docker Container | Step-by-Step Tutorial\nSave Docker Image as a File\nUbuntu Linux Change Hostname\nDay 21: Introduction to Docker Networking (Part 2)\nDocker Basic Commands Cheat Sheet\nHow to Create a New Sudo-Enabled User on Ubuntu\nChange Password for Root and User Accounts\nAsk ChatGPT\n\n","tags":["docker","ubuntu","ssh","devops","containerization","linux","tutorial"]},{"title":"設定GitHub SSH金鑰","url":"/blog/2024/11/github-ssh-key/","content":"Setup\n根據email創建一個新的SSH金鑰ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n\n開啟ssh-agent，將私鑰加入到ssh-agent\\\neval \"$(ssh-agent -s)\"ssh-add -K ~/.ssh/id_rsa\n\n上傳公鑰，並到GitHub上上傳SSH keycat ~/.ssh/id_rsa.pubGitHub Keys Settings\n\nssh連接GitHub SSHssh -T git@github.com\n\n\nResources\n設定 Github SSH 金鑰 feat. Github SSH、HTTPS 的差異\nHow to clone, push, and pull with git (beginners GitHub tutorial)\n\n","tags":["ssh","tutorial","github","git","setup"]},{"title":"量子計算基礎 - 從單量子位到多量子位系統","url":"/blog/2025/04/quantum-system/","content":"大一下去修了一門量子計算的課，前面的概念跟線性代數有滿多相似的地方，後半部分才真正開始講量子演算法。\n量子計算基礎簡介量子電腦與傳統電腦的差別，在於傳統電腦儲存資訊的最小單位是位元（bit），量子電腦則是使用量子位元（qubit）。位元可以存在一種狀態，1 或是 0。量子位元特別的地方是，它在一個時間，可以同時是 1 也是 0。\n\n過去超大整數的質因數分解，即使傳統超級電腦的運算能力也無法在短時間破解。不過，量子演算法（Shor’s Algorithm，可解質因數分解）能在合理時間內完成破解，會顛覆現在 RSA 等加密算法。\nClassical v.s. Quantum拆解質數現在有個數字 ，由  兩個很大的質數構成。破解 RSA 的核心，就是從  找出  和 。\n想要找到  的因數，只要不斷給定 ，透過 Euclid’s Algorithm（歐幾里得演算法，又稱輾轉相除法）快速計算判斷，當  使得公因數  時，對於 RSA 來說就已經結束了。\n但要找到  可以滿足上述條件其實並不容易，事實上真的只能一個一個猜  是多少。不過，我們可以將這個隨機猜測的數字  轉換成很有可能滿足條件的 。\n\n為什麼是  ？\n\n若給定兩個數 ，且 ，則存在一個正整數  使得 ，其中  為某個整數。\n\n舉兩個例子來說：\n\n**Ex1**\n\n給定 ，則：\n\n\n\n**Ex2**\n\n給定 ，則：\n\n\n\n因此，\n\n\n\n將機會不大的數字 g 轉換成很有可能的，只要找到這樣的就好（要是偶數才能真正拆解喔！）\nClassical我們用個例子來想，要用傳統電腦找到一個  使得 ，可能會從  開始一個一個慢慢代入判斷，但如果現在給定  的  和  都很大呢？\n對傳統電腦來說，就真的只能一個一個數字慢慢算，直到找到答案為止，這也就是為什麼現在能夠這麼廣泛地使用 RSA 加密。但是對量子電腦來說就不太一樣了……\nQuantum\n標準的 2048 位元 RSA 加密，就算用目前世界上最強的超級電腦（太湖之光，中國製），花費地球年齡的時間（46 億年）都無法破解。\n\n如果量子電腦真的存在，那麼再怎麼大的數字 ，都能在一瞬間拆解成  兩個質數。但是現在還不需要擔心，因為目前的技術還沒辦法處理太多位元的數字，可能只能拆解  這種容易的而已。\n\n單量子位系統 (Single-Qubit Quantum Systems)在量子計算中，量子位元 (Qubit) 是最基本的資訊單位，類似於傳統計算中的位元 (Bit)。然而，與傳統位元只能處於 0 或 1 的狀態不同，量子位元可以同時處於 0 和 1 的疊加態。先來介紹一下量子計算所處於的空間定義：\nHilbert 空間 (Hilbert Space)對於單量子位元系統，Hilbert 空間是一個複數  中的 inner product space，有向量加法、純量乘法，以及計算向量之間的內積。\n\nIf , , then .\n\n在單量子位元系統當中，我們常用, 當作標準基底，而一個量子位元則可表示為 。\n至於維度 (Dimension) 為  的向量空間，則會以  當作標準基底，也可以寫成 。\n|e_1\\rangle = \\begin{pmatrix} 1 \\\\ 0 \\\\ \\vdots \\\\ 0 \\end{pmatrix}, |e_2\\rangle = \\begin{pmatrix} 0 \\\\ 1 \\\\ \\vdots \\\\ 0 \\end{pmatrix}, \\ldots, |e_N\\rangle = \\begin{pmatrix} 0 \\\\ \\vdots \\\\ 0 \\\\ 1 \\end{pmatrix}\n正規化 (Normalized)：\n正交 (Orthogoral)：\n\n因此：\n\n\\langle e_i | e_j \\rangle = \\delta_{ij} = \\begin{cases} 1 & \\text{if } i = j \\\\ 0 & \\text{if } i \\neq j \\end{cases}Note：單量子位元系統的 Hilbert 空間是一個  的簡單空間，而複數量子位元系統的 Hilbert 空間維度會隨著量子位元數量增加而指數成長，例如  個量子位元系統的 Hilbert 空間維度為 。\n範例我們拿一個例子來說明好了，假設 , ，那麼可以做下列這幾個運算：\n對偶向量 (Dual Vector)\n\n\n\n內積 (Inner Product)\n\\langle \\phi | \\psi \\rangle = \\begin{pmatrix} 1 & 1-i \\end{pmatrix} \\begin{pmatrix} 1-i \\\\ 2 \\end{pmatrix} = 3(1-i)\n\\langle \\psi | \\phi \\rangle = \\begin{pmatrix} 1+i & 2 \\end{pmatrix} \\begin{pmatrix} 1 \\\\ 1+i \\end{pmatrix} = 3(1+i)\n\\langle \\psi | \\psi \\rangle = \\begin{pmatrix} 1+i & 2 \\end{pmatrix} \\begin{pmatrix} 1-i \\\\ 2 \\end{pmatrix} = 6 \\quad (\\in \\mathbb{R}_{\\geq 0})\n\\langle \\phi | \\phi \\rangle = \\begin{pmatrix} 1 & 1-i \\end{pmatrix} \\begin{pmatrix} 1 \\\\ 1+i \\end{pmatrix} = 3 \\quad (\\in \\mathbb{R}_{\\geq 0})因此：\n\n (non-negative real)\n\n\n\n向量範數 (Norm)\n\\| \\psi \\| = \\sqrt{\\langle \\psi | \\psi \\rangle}正規化向量 (Normalized Vector)量子態必須是正規化的，以保證測量結果的機率總和為 1。\n\n| \\psi \\rangle_N = \\frac{| \\psi \\rangle}{\\| \\psi \\|}例如：\n\n| \\psi \\rangle = \\frac{1}{\\sqrt{6}} \\begin{pmatrix} 1-i \\\\ 2 \\end{pmatrix}, \\quad | \\phi \\rangle = \\frac{1}{\\sqrt{3}} \\begin{pmatrix} 1 \\\\ 1+i \\end{pmatrix}計算內積：\n\n\\langle \\psi | \\psi \\rangle = \\frac{\\begin{pmatrix} 1+i & 2 \\end{pmatrix}}{\\sqrt{6}} \\cdot \\frac{\\begin{pmatrix} 1-i \\\\ 2 \\end{pmatrix}}{\\sqrt{6}} = \\frac{6}{6} = 1\n\\langle \\phi | \\phi \\rangle = \\frac{\\begin{pmatrix} 1 & 1-i \\end{pmatrix}}{\\sqrt{3}} \\cdot \\frac{\\begin{pmatrix} 1 \\\\ 1+i \\end{pmatrix}}{\\sqrt{3}} = \\frac{3}{3} = 1投影運算子 (Projection Operator)\n| \\psi \\rangle = \\frac{1}{\\sqrt{6}} \\begin{pmatrix} 1-i \\\\ 2 \\end{pmatrix} = \\frac{1-i}{\\sqrt{6}} | e_1 \\rangle + \\frac{2}{\\sqrt{6}} | e_2 \\rangle\n\\langle e_1 | \\psi \\rangle = \\langle e_1 | \\left( \\frac{1-i}{\\sqrt{6}} | e_1 \\rangle + \\frac{2}{\\sqrt{6}} | e_2 \\rangle \\right) = \\frac{1-i}{\\sqrt{6}} \\langle e_1 | e_1 \\rangle + \\frac{2}{\\sqrt{6}} \\langle e_1 | e_2 \\rangle = \\frac{1-i}{\\sqrt{6}}\n\\langle e_2 | \\psi \\rangle = \\langle e_2 | \\left( \\frac{1-i}{\\sqrt{6}} | e_1 \\rangle + \\frac{2}{\\sqrt{6}} | e_2 \\rangle \\right) = \\frac{1-i}{\\sqrt{6}} \\langle e_2 | e_1 \\rangle + \\frac{2}{\\sqrt{6}} \\langle e_2 | e_2 \\rangle = \\frac{2}{\\sqrt{6}}此時算出的  和  就分別是  在  和  兩個基底的投影運算子。\n崩塌 (Collapse)我們前面說過， 是由維的基底所組成的。其中  在  出現的機率為 ，則。\n在  當中， 出現的機率取決於 ，而此時的觀測是不可逆的。當測量完成後，量子態會崩塌到對應的基底態 ，並且無法回復到原本的疊加態。因此測量過程不可逆，且量子態的疊加性在測量後不復存在。\n\n範例\n| \\psi \\rangle = \\frac{1}{\\sqrt{6}} \\begin{pmatrix} 1-i \\\\ 2 \\end{pmatrix} = \\frac{1-i}{\\sqrt{6}} | e_1 \\rangle + \\frac{2}{\\sqrt{6}} | e_2 \\rangle\n 在  出現的機率為 \n\n 在  出現的機率為 \n\n\n\n\n量子態 (Quantum State)：\nP_i | \\psi \\rangle \\rightarrow | e_i \\rangle\n| \\psi \\rangle = \\alpha_1 | e_1 \\rangle + \\alpha_2 | e_2 \\rangle經典態 (Classical State)：\n\\frac{P_1}{| \\alpha_1 |^2} | \\psi \\rangle = \\frac{\\alpha_1}{| \\alpha_1 |^2} | e_1 \\rangle = e^{i\\theta_1} | e_1 \\rangle\n\\frac{P_2}{| \\alpha_2 |^2} | \\psi \\rangle = \\frac{\\alpha_2}{| \\alpha_2 |^2} | e_2 \\rangle = e^{i\\theta_2} | e_2 \\rangle量子態在測量後會崩塌到某個基底態，而此時的經典態不再具有量子態的疊加性。\nBloch 球 (Bloch Sphere)Bloch 球用於表示單量子位的狀態：video\n\n\n\n\n\n\n\n\n\n\nBloch 球上的 I, X, Y, Z 運算子幾何意義\nI (單位運算子)：不改變 Bloch 球上的狀態（即不旋轉）。\nX 門（Pauli-X）：繞  軸旋轉  弧度（180°），將  和  互換。對應於 Bloch 球上的  軸翻轉。\nY 門（Pauli-Y）：繞  軸旋轉  弧度（180°），將  和  互換，並帶有相位。對應於 Bloch 球上的  軸翻轉。\nZ 門（Pauli-Z）：繞  軸旋轉  弧度（180°），將  和  互換， 不變， 變號。對應於 Bloch 球上的  軸翻轉。\n\n簡單來說，X, Y, Z 分別對應於 Bloch 球上繞 、、 軸的 180° 旋轉。\n\n多量子位系統 (Multiple-Qubit Systems)Hilbert 空間與張量積 (Tensor Product)多量子位系統的 Hilbert 空間是單量子位空間的張量積：\n\nH_2 \\otimes H_2 \\otimes \\dots \\otimes H_2 = H_N \\quad (N \\text{ 個})假設：\n\n第 0 個 ：\n第 1 個 ：\n\nTensor Product\n\n| \\psi_1 \\rangle \\otimes | \\psi_0 \\rangle = [\\alpha_1 | 0 \\rangle_1 + \\beta_1 | 1 \\rangle_1] \\otimes [\\alpha_0 | 0 \\rangle_0 + \\beta_0 | 1 \\rangle_0]\n= \\alpha_1 \\alpha_0 | 0 \\rangle_1 \\otimes | 0 \\rangle_0 + \\alpha_1 \\beta_0 | 0 \\rangle_1 \\otimes | 1 \\rangle_0 + \\beta_1 \\alpha_0 | 1 \\rangle_1 \\otimes | 0 \\rangle_0 + \\beta_1 \\beta_0 | 1 \\rangle_1 \\otimes | 1 \\rangle_0\n= \\alpha_1 \\alpha_0 | 00 \\rangle_{10} + \\alpha_1 \\beta_0 | 01 \\rangle_{10} + \\beta_1 \\alpha_0 | 10 \\rangle_{10} + \\beta_1 \\beta_0 | 11 \\rangle_{10}而此時：\n\n$| 0 \\rangle1 \\otimes | 0 \\rangle_0 = | 00 \\rangle{10}$\n$| 0 \\rangle1 \\otimes | 1 \\rangle_0 = | 01 \\rangle{10}$\n$| 1 \\rangle1 \\otimes | 0 \\rangle_0 = | 10 \\rangle{10}$\n$| 1 \\rangle1 \\otimes | 1 \\rangle_0 = | 11 \\rangle{10}$\n\n 為  的基底\n範例假設：\n\n第 0 個 ：, ,  operator\n第 1 個 ：, ,  operator\n\n計算張量積：\n\n| 0 \\rangle _{10} = |00 \\rangle _2 = | 0 \\rangle _1 \\otimes |0 \\rangle _0 = \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix} \\otimes \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix} = \\begin{pmatrix} 1 \\\\ 0 \\\\ 0 \\\\ 0 \\end{pmatrix}\n| 1 \\rangle _{10} = |01 \\rangle _2 = | 0 \\rangle _1 \\otimes |1 \\rangle _0 = \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix} \\otimes \\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix} = \\begin{pmatrix} 0 \\\\ 1 \\\\ 0 \\\\ 0 \\end{pmatrix}\n| 2 \\rangle _{10} = |10 \\rangle _2 = | 1 \\rangle _1 \\otimes |0 \\rangle _0 = \\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix} \\otimes \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix} = \\begin{pmatrix} 0 \\\\ 0 \\\\ 1 \\\\ 0 \\end{pmatrix}\n| 3 \\rangle _{10} = |11 \\rangle _2 = | 1 \\rangle _1 \\otimes |1 \\rangle _0 = \\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix} \\otimes \\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix} = \\begin{pmatrix} 0 \\\\ 0 \\\\ 0 \\\\ 1 \\end{pmatrix}運算子與單元矩陣在多量子位系統中，運算子  和單位運算子  的結合可以用來描述量子態的演化。假設  和  是作用於不同量子位的運算子，若它們相等，即 ，則可以簡化為單一運算子  的作用。\n單位運算子  的作用不會改變量子態，滿足以下關係：\n\nI |\\psi\\rangle = |\\psi\\rangle其中，單位運算子  的矩陣形式為：\n\nI = \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix}當運算子  作用於單一量子位的量子態時，可以表示為：\n\nT | \\psi _1 \\rangle, | \\psi _0 \\rangle而當運算子  與單位運算子  結合，作用於多量子位系統的張量積態時，則可以表示為：\n\n(T \\otimes I) (| \\psi _1 \\rangle \\otimes | \\psi _0 \\rangle)單位運算子：\n\nI \\otimes I = \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix} \\otimes \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix} = \\begin{pmatrix} 1 \\times \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix} & 0 \\times \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix} \\\\ 0 \\times \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix} & 1 \\times \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix} \\end{pmatrix} = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\ 0 & 1 & 0 & 0 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 0 & 0 & 1 \\end{pmatrix} = I單元矩陣 (Unitary Matrix)假設  ：\n\nU = \\frac{1}{\\sqrt{2}} \\begin{pmatrix} 1 & i \\\\ i & 1 \\end{pmatrix}則可發現 \nNote：共軛轉置 (conjugate) \n\nU^{-1} = [\\frac{1}{\\sqrt{2}} \\begin{pmatrix} 1 & i \\\\ i & 1 \\end{pmatrix}]^* = \\frac{1}{\\sqrt{2}} \\begin{pmatrix} 1 & -i \\\\ -i & 1 \\end{pmatrix}\nU^\\dagger U = \\frac{1}{\\sqrt{2}} \\begin{pmatrix} 1 & -i \\\\ -i & 1 \\end{pmatrix} \\cdot \\frac{1}{\\sqrt{2}} \\begin{pmatrix} 1 & i \\\\ i & 1 \\end{pmatrix} = \\frac{1}{2} \\begin{pmatrix} 2 & 0 \\\\ 0 & 2 \\end{pmatrix} = \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix} = I\nU U^\\dagger = \\frac{1}{\\sqrt{2}} \\begin{pmatrix} 1 & i \\\\ i & 1 \\end{pmatrix} \\cdot \\frac{1}{\\sqrt{2}} \\begin{pmatrix} 1 & -i \\\\ -i & 1 \\end{pmatrix} = \\frac{1}{2} \\begin{pmatrix} 2 & 0 \\\\ 0 & 2 \\end{pmatrix} = \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix} = I 是 Unitary Matrix\n\n量子門與狀態轉換 (Quantum Gates and State Transformations)常見量子門 的基本運算子為 \n基本運算子 - X (NOT)\nX | 0 \\rangle = | 1 \\rangle, \\quad X | 1 \\rangle = | 0 \\rangle\nX = \\begin{pmatrix} 0 & 1 \\\\ 1 & 0 \\end{pmatrix}其中：\n\nX^2 = I = X^{-1}X\nX^{-1} = X基本運算子 - Y\nY | 0 \\rangle = +i | 1 \\rangle, \\quad Y | 1 \\rangle = -i | 0 \\rangle\nY = \\begin{pmatrix} 0 & -i \\\\ i & 0 \\end{pmatrix}其中：\n\nY^\\dagger = Y\nY^\\dagger Y = \\begin{pmatrix} 0 & -i \\\\ i & 0 \\end{pmatrix} \\begin{pmatrix} 0 & -i \\\\ i & 0 \\end{pmatrix} = \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix} = I\nY^2 = I 是單元矩陣\n基本運算子 - Z\nZ | 0 \\rangle = | 0 \\rangle, \\quad Z | 1 \\rangle = -| 1 \\rangle\nZ = \\begin{pmatrix} 1 & 0 \\\\ 0 & -1 \\end{pmatrix}糾纏態與測量在中，\n\nU = \\alpha I + \\beta X + \\gamma Y + \\delta ZBell State （貝爾態）\n\\frac{1}{\\sqrt{2}} (| 00 \\rangle + | 11 \\rangle)\n\\frac{1}{\\sqrt{2}} (| 00 \\rangle - | 11 \\rangle)\n\\frac{1}{\\sqrt{2}} (| 01 \\rangle + | 10 \\rangle)\n\\frac{1}{\\sqrt{2}} (| 01 \\rangle - | 10 \\rangle)Bell State 是兩個 qubit 之間最純粹的糾纏態。\n假設：\n\n| \\psi_1 \\rangle = \\alpha_1 | 0 \\rangle + \\beta_1 | 1 \\rangle, \\quad | \\psi_0 \\rangle = \\alpha_0 | 0 \\rangle + \\beta_0 | 1 \\rangle則它們的張量積\n\n| \\psi_1 \\rangle \\otimes | \\psi_0 \\rangle = \\alpha_1 \\alpha_0 | 00 \\rangle + \\alpha_1 \\beta_0 | 01 \\rangle + \\beta_1 \\alpha_0 | 10 \\rangle + \\beta_1 \\beta_0 | 11 \\rangle如果 ，則為 可分離態；否則為 糾纏態 (entanglement)。\n糾纏測量\n\\alpha_1 \\alpha_0 | 00 \\rangle + \\beta_1 \\beta_0 | 11 \\rangle \\neq | \\psi_1 \\rangle \\otimes | \\psi_0 \\rangle例如：\n\n| 00 \\rangle + | 11 \\rangle = | 0 \\rangle _1 \\otimes | 0 \\rangle _0 + | 1 \\rangle _1 \\otimes | 1 \\rangle _0\n此時去做量子測量：\n\n第 1 個質點測量到 ，則第 0 個質點就確定為 \n第 1 個質點測量到 ，則第 0 個質點就確定為 \n\n\n逆向計算 (Reverse Computation)CNOT (Control NOT)CNOT 門的運作如下：\n\n\n\\text{CNOT} = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\ 0 & 1 & 0 & 0 \\\\ 0 & 0 & 0 & 1 \\\\ 0 & 0 & 1 & 0 \\end{pmatrix} = \\begin{pmatrix} I & O \\\\ O & X \\end{pmatrix}CNOT 性質：\n\n\\text{CNOT} \\cdot \\text{CNOT} = I\n\\text{CNOT}^{-1} \\cdot \\text{CNOT} = I\n\\text{CNOT}^{-1} = \\text{CNOT}舉個例子：\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n這是所有計算中最重要的一個運算門，並且可以延伸出 COPY、NOT 和 SWAP 三種操作：\n\n\n\n\nCOPY\nNOT\nSWAP\n\n\n\n\n\n\n\n\n\n\n\nCCNOT (Toffoli Gate)CCNOT 門的運作如下：\n\n\n\n\n\nCCNOT 性質：\n\n\n\\text{CCNOT} \\cdot \\text{CCNOT} = I\n\\text{CCNOT}^{-1} \\cdot \\text{CCNOT} = I\n\\text{CCNOT}^{-1} = \\text{CCNOT}邏輯運算門ANDAND 的運作如下：\n\nXORXOR 的運作如下：\n\nNAND (NOT AND)NAND 的運作如下：\n\nNOTNOT 也可以用 CNOT 的形式來表示：\n\nOROR 的運作如下：\n\n範例以下是量子電路的等價性：\n\n\n量子傳輸量子演算法Bernstein-Vazirani AlgorithmSimon’s AlgorithmShor’s AlgorithmGrover’s Algorithm","tags":["quantum","hilbert-space","algorithms","physics"]},{"title":"Vue Basic Syntax","url":"/blog/2025/01/vue-basic-syntax/","content":"Vue Basic SyntaxDirectives\nEvent Binding: v-on or shorthand @click\nAttribute Binding: v-bind or shorthand :attribute\nExamples: :input, :input.enter, :key\n\n\nTwo-Way Binding: v-model\nConditional Rendering:\nv-if\nv-else-if\nv-else\nv-show\n\n\nList Rendering: v-for\nExample: v-for=\"goal in goals\"\n\n\n\nCommunication Between Components\nProps: Pass data from parent to child\nEmits: Send events from child to parent\n\n","tags":["tutorial","vue","syntax","basics","guide"]}]